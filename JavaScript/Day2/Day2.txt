연산자

1. 산술 연산자
산술 연산자는 사칙연산을 다루는 가장 기본적이면서도 많이 사용하는 연산자입니다.

+ : 더하기
- : 빼기
* : 곱하기
/ : 나누기
% : 나눈 나머지 값 (예 : 10 % 3 = 1)

2. 비교 연산자
비교 연산자는 피연산자 사이의 상대적인 크기를 판단하여 참(true), 거짓(false)를 반환합니다.

== : 두 식의 값이 같으면 참을 반환합니다.
예) 5 == 5 (true), "5" == "5" (true), 5 == "5" (true)
> : 왼쪽의 값이 오른쪽의 값보다 크면 참을 반환합니다.
< : 오른쪽의 값이 왼쪽의 값보다 크면 참을 반환합니다.
>= : 왼쪽의 값이 오른쪽의 값보다 크거나 같으면 참을 반환합니다.
<= : 오른쪽의 값이 왼쪽의 값보다 크거나 같으면 참을 반환합니다.
!= : 두 식의 값이 다르면 참을 반환합니다.
=== : 두 식의 값이 같고, 타입까지 같으면 참을 반환합니다.
예) "5" === 5 (false)
!== : 두 식의 값이 같지 않고, 타입까지 같지 않으면 참을 반환합니다.

3. 증감 연산자
증감 연산자는 값을 1씩 증가 혹은 감소시킬 때 사용하는 연산자입니다. 연산자가 어느 쪽에 위치하는가에 따라 연산의 순서 및 결과가 달라집니다.

++변수 : 변수의 값을 1증가시킨 후에 연산을 진행합니다.
변수++ : 먼저 연산을 수행하고 나서, 변수의 값을 1증가 시킵니다.
--변수 : 변수의 값을 1감소시킨 후에 연산을 진행합니다.
변수-- : 먼저 연산을 수행하고 나서, 변수의 값을 1감소 시킵니다.

var a = 5;
var b = ++a;

var a = 5;
var b = a++; or document.write(a++);

4. 대입 연산자
대입 연산자는 변수에 값을 대입할 때 사용하는 연산자입니다.

= : 왼쪽 변수에 오른쪽 값을 대입합니다.
+= : 왼쪽 변수에 오른쪽 값을 더한 후, 그 결과를 왼쪽 변수에 재대입합니다.
예) a +=5; -> a = a + 5;
-= : 왼쪽 변수에 오른쪽 값을 뺀 후, 그 결과를 왼쪽 변수에 재대입합니다.
*= : 왼쪽 변수에 오른쪽 값을 곱한 후, 그 결과를 왼쪽 변수에 재대입합니다.
/= : 왼쪽 변수에 오른쪽 값을 나눈 후, 그 결과를 왼쪽 변수에 재대입합니다.
%= : 왼쪽 변수에 오른쪽 값을 나눈 나머지 값의 결과를 왼쪽 변수에 재대입합니다.

5. 논리 연산자
논리 연산자는 주어진 논리식을 판단하여 참과 거짓을 반환합니다.

AND연산(&&) : 두 논리식이 모두 참이면 참을 반환하는 연산자입니다.
A	B	A&&B
true	true	true
true	false	false
false	true	false
false	false	false

OR연산(||) : 두 논리식 중 하나라도 참이면 참을 반환하는 연산자입니다.
A	B	A||B
true	true	true
true	false	true
false	true	true
false	false	false

NOT연산(!) : 논리식의 결과가 참이면 거짓으로, 거짓이면 참으로 변환하는 연산자입니다.
A	!A
true	false
false	true

6. 비트 연산자
비트 연산자는 논리 연산자와 비슷하지만, 비트 단위로 논리 연산을 수행합니다. 또한 비트 단위로 전체 비트를 왼쪽이나 오른쪽으로 이동시킬 때도 사용합니다.

bit : 컴퓨터 용량의 최소단위입니다. 0 또는 1을 저장하는 단위입니다.
byte : 1바이트는 8비트입니다.
KB(킬로바이트) : 1KB는 1024byte 입니다.
MB(메가바이트) : 1MB는 1024KB 입니다.
GB(기가바이트) : 1GB는 1024MB 입니다.
TB(테라바이트) : 1TB는 1024GB 입니다.

& : 대응되는 비트가 모두 1이면 1을 반환합니다. 
25 & 18 -> 16
	32	16	8	4	2	1
		1	1	0	0	1 (25)
&		1	0	0	1	0 (18)
-------------------------------------------------------
		1	0	0	0	0 (16)


| : 대응되는 비트 중에서 하나라도 1이면 1을 반환합니다.
25 | 18 -> 27

	32	16	8	4	2	1
		1	1	0	0	1 (25)
|		1	0	0	1	0 (18)
-------------------------------------------------------
		1	1	0	1	1 (27)


^ : 대응되는 비트가 서로 다르면 1을 반환합니다. (XOR)
25 ^ 18 -> 11
	32	16	8	4	2	1
		1	1	0	0	1 (25)
^		1	0	0	1	0 (18)
-------------------------------------------------------
		0	1	0	1	1 (11)

<< : 지정한 수만큼 비트를 전부 왼쪽으로 이동시킵니다.
25 << 2 -> 100
11001 -> 1100100
>> : 지정한 수만큼 비트를 전부 오른쪽으로 이동시킵니다.
25 >> 2 -> 6
11001 -> 110


7. 삼항 연산자
조건식에 따른 참, 거짓에 따라 반환값이 달라지는 연산자입니다.
예)
조건식 ? 반환값1 : 반환값2
        -----   ------
	true	false

문제
아래 출력 내용과 같이 프로그램을 작성(단, 입력은 prompt 함수를 사용)
입력 : 이름, 국어점수, 영어점수, 수학점수

XXX님 성적
국어점수 : X점
영어점수 : X점
수학점수 : X점
총점 : X점
평균 : X점


제어문
프로그램의 순차적인 흐름을 제어해야 할 때 사용하는 실행문을 의미합니다.

1. 조건문
프로그램 내에서 주어진 조건문의 결과에 따라 별도의 명령을 수행하도록 제어하는 실행문입니다.
1) if문
2) switch문

2. 반복문
프로그램 내에서 같은 명령을 일정 횟수만큼 반복하여 수행하도록 제어하는 실행문입니다.
1) while문
2) for문


if문
if문은 조건식의 결과가 참이면 주어진 실행문을 실행하고, 거짓이면 아무것도 실행하지 않는 문장입니다.
예)
if(조건식) {
	조건식의 결과가 참일 때 실행할 문장;
}

if ~ else 문
if문과 같이 사용할 수 있는 else문은 if문의 조건식의 결과가 거짓일 때 실행문을 실행합니다.

if(조건식) {
	조건식의 결과가 참일 때 실행할 문장;
}else{
	조건식의 결과가 거짓일 때 실행할 문장;
}

if ~ else if ~ else 문
else if문은 if문처럼 조건식을 설정할 수 있으므로 중첩된 if문을 좀 더 간견하게 표현할 수 있습니다. 하나의 조건문 안에서 if문과 else문은 다 한번만 사용할 수 있습니다. 하지만 else if문은 여러 번 사용하여 다양한 조건을 설정할 수 있습니다. (단, else문은 생략가능)

if(조건식1) {
	조건식1의 결과가 참일 때 실행할 문장;
}else if(조건식2){
	조건식2의 결과가 참일 때 실행할 문장;
}
...
else{
	조건식의 결과가 거짓일 때 실행할 문장;
}


문제
아래 출력 내용과 같이 프로그램을 작성(단, 입력은 prompt 함수를 사용)
입력 : 이름, 국어점수, 영어점수, 수학점수
(학점은 평균 기준으로, 평균이 90점이상이면 A학점, 80점이상이면 B학점, 70점이상이면 C학점, 60점 이상이면 D학점, 나머지는 F학점)
XXX님 성적
국어점수 : X점
영어점수 : X점
수학점수 : X점
총점 : X점
평균 : X점
학점 : X점

switch 문
switch문은 if ~ else문과 마찬가지로 주어진 조건 값에 따라 프로그램이 다른 명령을 수행하도록 하는 조건문입니다. switch문은 if~else문 보다 가독성 및 속도 측면에서 더 좋습니다.

switch(비교값){
	case 값1:
		비교값이 값1과 같을 때 실행할 문장;
		break;
	case 값2:
		비교값이 값2과 같을 때 실행할 문장;
		break;
	case 값3:
		비교값이 값3과 같을 때 실행할 문장;
		break;
	...
	default:
		비교값이 모두 다를 경우 실행할 문장;
}