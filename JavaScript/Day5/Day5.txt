사용자 정의 함수(function)
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다. 함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행할 수 있습니다.

1. 이름만 존재하는 함수
function 함수이름() {
	함수가 호출되었을 때 실행할 문장;
}

함수이름();

2. 매개변수를 입력하여 호출하는 함수
function 함수이름(매개변수1, 매개변수2 ..){
	함수가 호출되었을 때 실행할 문장;
}

함수이름(값1, 값2 ..);

3. 매개변수를 입력하여 호출하면 리턴값이 돌아오는 함수
function 함수이름(매개변수1, 매개변수2 ..){
	함수가 호출되었을 때 실행할 문장;
	return 값;
}

var 변수 = 함수이름(값1, 값2..);


문제
prompt로 두 수를 입력받아 두 수의 사칙연산을 출력하는 프로그램을 작성
(단, 각 연산은 별도의 함수로 만들고 return 키워드를 사용하여 값을 전달 받아 출력)

출력예시)
첫번째 숫자를 입력하세요. 7
두번재 숫자를 입력하세요. 4

7 + 4 = 11
7 - 4 = 3
..

변수의 범위
자바스크립트에서 객체나 함수는 모두 변수입니다. 변수의 범위란 변수가 접근할 수 있는 변수, 객체 그리고 함수의 집합을 의미합니다.

1. 지역 변수
함수 내에서 선언된 변수를 가리킵니다. 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라집니다.

function func2(start, end){	// start, end, sum , i는 지역변수
    var sum = 0;
    for(var i=start; i<=end; i++){
	sum += i;
    }
    return sum;
}

2. 전역 변수
함수의 외부에서 선언된 변수를 가리킵니다. 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라집니다.

var a = 10;	// a -> 전역변수

function func1(x){	// x -> 지역변수
    document.write("전달된 값 : " + x + "<br>");
}

document.write(a);


객체(Object)
실생활에서 우리가 인식할 수 있는 사물들을 객체라고 합니다. 

dog
이름 : 루시
종 : 포메리안	----> 필드
색상 : 흰색
나이 : 9
몸무게 : 2		---------> 프로퍼티

먹는다
잔다		----> 메서드
뛰어논다
짖는다

프로퍼티
자바스크립트의 기본 타입은 객체입니다. 객체란 이름과 값으로 구성된 프로퍼티의 정렬되지 않은 집합입니다. 프로퍼티의 값으로 함수도 올 수 있는데, 프로퍼티 메소드라고 부릅니다.

let dog = { 
	name:"루시", 
	family:"포메리안",
	age:9, 
	weight:2 
	play: function(){
		document.write("잘논다");
	}
}

document.write(dog.name);


객체의 생성
1. 리터럴 표기법을 이용한 객체의 생성
자바스크립트에서 객체를 생성하는 가장 쉬운 방법은 리터럴 표기법을 이용한 방법입니다.

var 객체이름 = {
	프로퍼티명1 : 프로퍼티값1,
	프로퍼티명2 : 프로퍼티값2,
        프로퍼티명3 : 프로퍼티값3,
	...
};

2. 생성자를 이용한 객체의 생성
new 연산자를 사용하여 객체를 생성하고 초기화 할 수 있습니다. 이 때 사용되는 메소드를 생성자라고 하며, 이 메소드는 새롭게 생성되는 객체를 초기화하는 역할을 합니다.

function 생성자명(매개변수1, 매개변수2 ..){
	프러퍼티명1 = 값1;
	프러퍼티명2 = 값2;
        프러퍼티명3 = 값3;
        ...
	프러퍼티명4() { };
	프러퍼티명5() { };
        ...
}

var 객체명1 = new 생성자명(값1, 값2..);
var 객체명2 = new 생성자명(값1, 값2..);


상속
자바스크립트는 프로토타입 기반의 객체 지향 언어입니다. 프로토타입 기반이기 때문에 상속의 개념이 클래스 기반의 객체 지향 언어와 다릅니다. 자바스크립트에서는 현재 존재하고 있는 객체의 프로토타입을 사용하여 해당 객체를 복사하고 재사용하는 것을 상속이라고 부릅니다.

* 프로토타입(prototype)
자바스크립트의 모든 객체는 프로토타입이라는 객체를 가지고 있습니다. 모든 객체는 그들의 프로토타입으로부터 프로퍼티와 메소드를 상속받습니다. 이처럼 자바스크립트의 모든 객체는 최소한 하나 이상의 다른 객체로부터 상속을 받으며, 이때 상속되는 정보를 제공하는 객체를 프로토타입이라고 합니다.

var tg1 = new triangle(15, 15); // tg1의 객체의 프로토타입은 triangle.prototype 입니다.

* 자바스크립트에 내장된 모든 생성자나 사용자 정의 생성자는 Object.prototype와 자신의 생성자 객체를 프로토타입으로 가집니다.

tg1	<--------- triangle.prototype
	<--------- Object.prototype

