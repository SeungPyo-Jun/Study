브라우저 객체 모델(BOM)
자바스크립트를 이용하면 브라우저의 정보에 접근하거나 브라우의 여러 기능들을 제어할 수 있습니다. 이 때 사용할 수 있는 객체 모델이 브라우저 객체 모델입니다. 이 모델은 자바스크립트가 브라우저의 기능적인 요소들을 제어하고 관리할 방법을 제공해줍니다. 자바스크립트에서는 이런 BOM 모델의 객체들을 전역 객체로 사용할 수 있습니다. (단, 브라우저 객체 모델은 비표준 스크립트입니다.)

window
윈도우 객체는 비표준 스크립트이기는 하지만 대부분의 브라우저에서 공통적으로 사용할 수 있는 기능들을 제공합니다.

open() 
새로운 브라우저의 창을 열 수 있습니다. 또한 세부적인 옵션도 설정할 수 있습니다.

var 변수명 = window.open(주소, 이름, 옵션);
변수명 : 새로 만들어질 창 객체가 리터됩니다. 이 객체를 통해 새창을 제어할 수 있습니다.
(예: 변수명.close() 창을 닫을 수 있습니다.)
주소 : 새창에 보여질 주소입니다.
이름 : 새로 열릴 창의 속성 또는 창의 이름을 지정합니다.
옵션 : 선택적인 값으로 창의 크기나 스크롤 여부, 리사이즈 등의 속성을 지정할 수 있습니다.

setTimeout()
일정 시간이 지난 후 매개변수로 제공된 함수를 실행합니다.

setInterval()
일정 시간마다 매개변수로 제공된 함수를 실행합니다.

clearTimeout()
일정 시간 후 setTimeout() 에서 실행된 함수를 중지합니다.

clearInterval()
일정 시간마다 setInterval() 에서 실행된 함수를 중지합니다.


Location
현재 브라우저에 표시된 HTML 문서의 주소를 얻거나, 브라우저에 새 문서를 불러올 때 사용합니다. 이 객체는 window 객체의 location 프로퍼티와 document 객체의 location 프로퍼티에 같이 연결되어 있습니다.

href : 페이지의 URL 전체 정보를 반환합니다. URL을 지정하여 페이지를 이동할 수도 있습니다.
- document.write(location.href) // 현재 페이지 정보를 반환합니다.
- location.href="js_01.html"; // js_01.html로 페이지를 이동
protocol : 콜론을 포함하는 http, https, ftp 프로토콜 정보를 반환합니다.
hostname : 호스트의 이름과 포트번호를 반환합니다.
pathname : URL 경로부분의 정보를 반환합니다.
port : 포트번호를 반환합니다.


history
브라우저의 히스토리 정보를 문서와 문서 상태 목록으로 저장하는 객체입니다. 자바스크립트는 사용자의 개인 정보를 보호하기 위해 이 객체의 접근하는 방법을 일부 제한하고 있습니다.

back() : 브라우저에서 뒤로 버튼을 누른 효과를 내는 메서드입니다.
go() : 매개변수로 전달된 숫자만큼 브라우저 히스토리에 적용된 페이지로 이동하는 메소드입니다.
goForward() : 브라우저에서 앞으로 버튼을 누른 효과를 내는 메서드입니다.

screen
사용자의 디스플레이 화면에 대한 정보를 저장하는 객체입니다.
availWidth : 실제 사용할 수 있는 화면의 너비를 저장하고 있는 프러퍼티
availHeight : 실제 사용할 수 있는 화면의 높이를 저장하고 있는 프러퍼티
colorDepth : 사용자 화면에서 한 색상당 사용할 수 있는 비트수를 저장하고 있는 프로퍼티

navigator
브라우저 공급자 및 버전 정보등을 포함한 브라우저에 대한 정보를 저장하는 객체입니다. 이 객체의 이름은 넷스케이프(Netscape)의 초기 웹 브라우저였던 네비게이터(Navigator)에서 유래되었습니다.
appName : 브라우저의 이름을 리턴해주는 프러퍼티입니다.
appCodeName : 브라우저의 코드명을 리턴해주는 프러퍼티입니다.
appVersion : 브라우저의 버전 정보를 리턴해주는 프러퍼티입니다.
userAgent : userAgent 프러퍼티로 알 수 있는 추가 정보를 리턴하는 프러퍼티입니다.

* browser sniffing
과거에는 방문자의 웹 브라우저의 종류를 미리 파악하여 조치함으로써, 브라우저 간의 호환성을 유지했습니다. 이런 호환성을 유지하는 방법을 브라우저 스니핑이라고 합니다. 


문서 객체 모델(DOM)
문서 객체 모델은 XML이나 HTML 문서에 접근하기 위한 일종의 인터페이스입니다. 이 객체 모델은 문서내의 모든 요소를 정의하고, 각각의 요소에 접근하는 방법을 제공합니다.

<!DOCTYPE html>
<html lang="ko">
<head>
   <title>간단한 HTML 문서</title>
</head>
<body>
    <h1>HTML 문서</h1>
    <img src="img/js.png">
</body>
</html>

			document
			  [html] - lang
		[head]	-----------  [body]
		[title]		[h1]		[img] - src
	     간단한 HTML 문서    HTML 문서               img/js.png

document
웹 페이지 그 자체를 의미합니다. 웹 페이지에 존재하는 HTML 요소에 접근하고자 할 때는 반드시 document 객체로부터 시작해야 합니다.

getElementsByTagName() : 해당 태그 이름의 요소를 모두 선택합니다.
getElementById() : 해당 아이디의 요소를 선택합니다.
getElementsByClassName() : 해당 클래스에 속한 요소를 모두 선택합니다.
getElementsByName() : 해당 name 속성값을 가지는 요소를 모두 선택합니다.
querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택합니다.

노드(node)
HTML DOM은 노드(node)라고 불리는 계층적 단위에 정보를 저장합니다. HTML DOM은 노드들을 정의하고, 그 사이의 관계를 설명해 주는 역할을 합니다. HTML 문서의 정보는 노드 트리라고 불리는 계층적 구조에 저장됩니다. 노드 트리는 노드들의 집합이며 노드 간의 관계를 보여줍니다. 노드 트리는 최상위 레벨인 루트 노드로부터 시작하여, 가장 낮은 레벨인 텍스트 노드까지 내려갑니다. 자바스크립트에서는 HTML DOM 이용하여 노드 트리에 포함된 모든 노드에 접근할 수 있습니다.

노드의 종류
문서 노드(document node) : HTML 문서 전체를 나타내는 노드입니다.
요소 노드(element node) : 모든 HTML 요소는 요소 노드이며, 속성 노드를 가질 수 있는 유일한 노드입니다.
속성 노드(attribute node) : 모든 HTML 요소의 속성은 속성 노드이며, 요소 노드에 관한 정보를 가지고 있습니다. 하지만 해당 요소 노드의 자식 노드에는 포함되지 않습니다.
텍스트 노드(text node) : HTML 문서의 모든 텍스트는 텍스트 노드입니다.
주석 노드(comment node) : HTML 문서의 모든 주석은 주석 노드입니다.

* 노드 트리의 가장 상위에는 단 하나의 루트 노드(root node)가 존재합니다. 루트 노드를 제외한 모든 노드는 단 하나의 부모 노드(parent node)만을 가집니다. 모든 요소 노드는 자식 노드(child node)를 가질 수 있습니다. 형제 노드(sibling node)란 같은 부모 노드를 가진 모든 노드를 가리킵니다. 조상 노드(ancestor node)란 부모 노드를 포함해 계층적으로 현재 노드보다 상위에 존재하는 모든 노드를 가리킵니다. 자손 노드(descendant node)란 자식 노드를 포함해 계층적으로 현재 노드보다 하위에 존재하는 모든 노드를 가리킵니다.

노드 간의 관계
parentNode : 부모 노드
childNodes : 자식 노드 리스트
firstChild : 첫 번째 자식 노드
lastChild : 마지막 자식 노드
nextSibling : 다음 형제 노드
previousSibling : 이전 형제 노드

빈 텍스트 처리
익스플로러를 제외한 대부분의 브라우저는 요소와 요소 사이에 빈 공백 또는 개행이 이루어지면 텍스트노드로 처리됩니다. 따라서 노드간의 관계에 텍스트 노드가 중간에 사용되면 노드 이동이 불명확해 질 수 있습니다.
