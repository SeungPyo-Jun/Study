노드의 추가
appendChild() : 새로운 노드를 해당 노드의 자식 노드 리스트 맨 마지막에 추가합니다.
insertBefore() : 새로운 노드를 특정 자식 노드 바로 앞에 추가합니다.
insertData() : 텍스트 노드를 텍스트 데이터에 새로운 텍스트로 추가합니다.
* 텍스트노드.insertData(오프셋, 새로운 데이터);
오프셋 : 값은 0부터 시작하며, 기존 텍스트 데이터의 몇 번째 위치에 추가할지를 전달합니다.
새로운 데이터 : 삽입할 데이터를 전달합니다.

노드의 생성
createElement() : 새로운 요소 노드를 만들 수 있습니다.
createAttribute() : 새로운 속성 노드를 만들 수 있습니다. 만약 같은 이름의 속성 노드가 이미 존재한다면, 기존 속성 노드는 새로운 속성 노드로 대체됩니다.
createTextNode() : 새로운 텍스트 노드를 만들 수 있습니다.

노드의 제거
removeChild() : 자식 노드 리스트에서 특정 자식 노드를 제거합니다. 이 메소드는 성공적으로 노드가 제거되면 제거된 노드를 반환합니다. 노드가 제거될 때에는 제거되는 노드의 모든 자식들도 다 같이 제거됩니다.
removeAttribute() : 속성의 이름을 이용하여 특정 속성 노드를 제거합니다.

노드의 복제
cloneNode() : 기존의 존재하는 노드와 동일한 새로운 노드를 생성하여 반환합니다.
* 복제할 노드.cloneNode(자식노드 복제여부);
자식노드 복제여부 : 전달될 값이 true면 복제되는 노드의 모든 속성과 자식 노드도 같이 복제되고, false면 속성 노드만 복제하고 자식 노드는 복제하지 않습니다.

요소 노드의 교체
replaceChild() : 기존의 요소 노드를 새로운 요소 노드로 교체할 수 있습니다.
* 교체된 노드 = 부모노드.replaceChild(새로운 자식 노드, 기존 자식 노드);

텍스트 노드의 데이터 교체
replceData() : 텍스트 노드의 텍스트 데이터를 바꿀 수 있습니다.
* 텍스트 노드.replceData(오프셋, 교체할 문자수, 새로운 데이터);

form 객체 선택 방법
자바스크립트에서는 일반적으로 폼에 접근할 때 id 또는 name을 이용할 수 있습니다. 또한 document.forms 컬렉션을 이용하여 접근할 수도 있습니다.

<form name="myform" id="regform" method="post" action="regist.php">
아이디 : <input type="text" name="userid"><br>
비밀번호 : <input type="password" name="userpw"><br>
<input type="submit" value="전송">
</form>

let frm = document.myform; // name 속성으로 form 에 접근
let frm = document.getElementById("regform"); // id로 form에 접근

아이디 : [apple]
let id = frm.userid.value; // apple
let id = frm.elements[0].value // apple
let id = frm.elements['userid'].value // apple

option 객체
자바스크립트에서 option을 동적으로 생성 및 변경을 가능하게 해주는 객체입니다.

new option(text, value, defaultselected, selected);

<select>
	<option value="1">류정원</option> <!-- text:"류정원", value="1" -->
	<option value="2">김사과</option>
        <option value="3">반하나</option>
</select>


자바스크립트의 정규식 표현

^x : 문자열이 x로 시작한다 
x$ : 문자열이 x로 끝난다 
.x : 임의의 한 문자를 표현한다 
x+ : x가 1번이상 반복한다 
x? : x가 존재하거나 존재하지 않는다 
x* : x가 0번이상 반복한다 
x|y : x또는 y를 찾는다 
(x), (x)(y), (x)(?:y) : ()안의 내용을 캡쳐하며, 그룹화 한다 
x{n} : x를 n번 반복한 문자를 찾는다 
x{n,} : x를 n번 이상 반복한 문자를 찾는다 
x{n,m} : x를 n번 이상 m번 이하 반복한 문자를 찾는다 

[xy] : x,y중 하나를 찾는다
[^xy] : x,y를 제외하고 문자 하나를 찾는다 
[x-z] : x~z 사이의 문자중 하나를 찾는다 
\^ : 특수문자를 문자로 인식함 
\b : 문자와 공색사이의 문자를 찾는다 
\B : 문자와 공백사이가 아닌 값을 찾는다 
\d : 숫자를 찾는다 
\D : 숫자가 아닌 값을 찾는다 
\s : 공백문자를 찾는다 
\S : 공백이 아닌 문자를 찾는다 
\t : Tab 문자를 찾는다 
\v : Vertical Tab 문자를 찾는다 
\w : 알파벳 + 숫자 + _ 를 찾는다
\W : 알파벳 + 숫자 + _을 제외한 모든 문자를 찾는다

test() : 정규식 표현식에 대입한 문자열이 부합하며 true, 아니라면 false 반환합니다.
예)
let exptext = /^[A-Za-z0-9\.\-]+@[A-Za-z0-9\.\-]+\.[A-Za-z0-9\.\-]+/;
exptext.test("ryuzy@naver.com"); // true
exptext.test("ryuzy@"); // false



