이벤트(Event)
이벤트란 웹 브라우저가 알려주는 HTML 요소에 대한 사건의 발생을 의미합니다. 웹 페이지에 사용된 자바스크립트는 발생한 이벤트에 반응하여 특정 동작을 수행할 수 있습니다. 따라서 자바스크립를 비동기식 이벤트 중심(Event-Driven)의 프로그래밍 모델이라고 합니다.

이벤트 타입(Event type)
이벤트 타입은 발생한 이벤트의 종류를 나타내는 문자열로 이벤트명(Event Name)이라고도 합니다. 가장 많이 사용하는 키보드, 마우스, HTML DOM, window 객체등 처리하는 이벤트가 폭넓게 제공되고 있습니다.
https://developer.mozilla.org/en-US/docs/Web/Events

이벤트 타겟(Event Target)
이벤트가 일어날 객체를 의미합니다.
예)
<input type="button" onclick="sendit()" value="가입완료">
	    -------- -------  --------
	    이벤트타겟  이벤트타입 이벤트리스너(이벤트핸들러)

이벤트 리스너(Event Listener)
이벤트 리스너란 이벤트가 발생했을 때 그 처리를 담당하는 함수를 가리키며, 이벤트 핸들러(Event handler)라고도 합니다. 지정된 타입의 이벤트가 특정 요소에서 발생하면, 웹 브라우저는 그 요소에 등록된 이벤트 리스터를 실행시킵니다.

* 자바스크립트에서 프로퍼티로 이벤트를 등록하는 방법은 모든 브라우저가 대부분 이벤트 타입으로 지원하고 있습니다. 이 방법의 단점은 이벤트 타입별로 오직 하나의 이벤트 리스너만을 등록할 수 있다는 점입니다.

객체나 요소의 메소드에 이벤트 리스너를 전달하는 방법
addEventListener()
이벤트타겟.addEventListener(이벤트 타입, 이벤트 리스너);
removeEventListener()
이벤트타겟.removeEventListener(이벤트 타입, 이벤트 리스너);

이벤트 객체(Event Object)
이벤트 객체란 특정 타입의 이벤트와 관련이 있는 객체입니다. 이벤트 객체는 해당 타입의 이벤트에 대한 상세 정보를 저장하고 있습니다. 모든 이벤트 객체는 이벤트의 타입을 나타내는 type 프로퍼티와 이벤트 대상을 나타내는 target 프로퍼티를 가집니다. 이러한 이벤트 객체는 이벤트 리스너가 호출될 때 인수로 전달됩니다.
예)
btn.addEventListener("click", clickBtn);

function clickBtn(e){
	// e.target 
	// e.type
}

이벤트 전파(Event Propagation)
이벤트 전파란 이벤트가 발생했을 때, 브라우저가 이벤트 리스너를 실행시킬 대상 요소를 결정하는 과정을 의미합니다. 이벤트의 대상이 window 객체와 같은 단일 객체라면 이벤트의 전파는 일어나지 않습니다. 하지만 document 객체나 HTML 문서의 요소에서 이벤트가 일어나면 대상 요소를 결정하기 위해 이벤트의 전파가 일어납니다. 이벤트 전파 방식은 버블링 전파방식과 캡쳐링 전파 방식으로 나눠집니다.

1. 버블링 전파 방식
이벤트가 발생한 요소부터 시작해서 DOM 트리를 따라 위쪽으로 올라가며 전파되는 방식입니다. 이 전파 방식은 해당 요소의 리스너가 실행 된 후 그 부모 요소에 등록된 리스너가 실행되고, 또 다시 그 부모 요소에 등록된 리스너가 실행됩니다.

2. 캡쳐링 전파 방식
이벤트가 발생한 요소까지 DOM 트리의 최상위부터 아래쪽으로 내려가면서 전파되는 방식입니다. 이 전파 방식은 맨 먼저 window 객체의 리스너가 실행된 후 document 객체에 등록된 리스너가 실행되고 또 다시 자식 요소에 등록된 리스너가 실행됩니다. 이 전파 방식을 사용하기 위해서는 addEventListener() 메소드의 세 번째 인수에 true를 전달하면 됩니다.


화살표 함수
화살표 함수는 ES6문법입니다. function 키워드를 사용해서 함수를 만드는 것보다 간단히 함수를 표현할 수 있습니다. 화살표 함수는 항상 익명입니다.

function func1() { console.log("안녕하세요."); }

let func1 = function() { console.log("안녕하세요."); }

let func1 = () => console.log("안녕하세요.");
func1();

매개변수가 하나인 경우
let func1 = x => x;
func1(10);

매개변수가 여러개인 경우
let func1 = (x, y) => x + y;
func1(10, 5);

* return문을 사용할 때는 반드시 {}를 사용합니다.
* return문이 있을 경우 한 줄로 명령문을 작성하면 undefind를 반환합니다.
* {}를 사용할 때는 return문이 있거나 여러줄의 명령문을 작성할 때 입니다.
let func1 = (x, y) => { return x + y; }

여러줄을 사용할 경우
let func1 = (x, y) => {
	let z = 10;
	return x + y + z;
}
func1(5, 7);


제이쿼리(jQuery)
오픈소스 기반의 자바스크립트 라이브러리입니다. 제이쿼리를 이용하면 문서 객체 모델(DOM)과 이벤트에 관한 처리를 손쉽게 구현할 수 있습니다. 또한 Ajax 응용 프로그램 및 플로그인도 제이쿼리를 활용하여 빠르게 개발할 수 있습니다.

제이쿼리 버전
jQuery Foundation을 통해 버전 개발 및 유지보수가 진행되고 있습니다.

제이쿼리 버전1은 익스플로러 6, 7, 8 버전에서의 동작까지 모두 지원하는 버전입니다.
제이쿼리 버전2는 버전1에서 지원하는 익스플로러 6, 7, 8 버전에 대한 지원을 중단한 버전입니다.
제이쿼리 버전3은 2014년 10월에 배포된 제이쿼리의 표준입니다. 제이쿼리 버전3은 기존 버전과의 호환성을 유지한 간결하고 빠른 라이브러리로 변경되었습니다. 

* 제이쿼리 버전2와 버전3는 모두 익스플로러 9이상에서만 동작합니다. 이 때문에 아직도 많은 웹사이트에서는 제이쿼리 버전1을 사용하고 있습니다.

제이쿼리 공식 사이트
https://jquery.com/



